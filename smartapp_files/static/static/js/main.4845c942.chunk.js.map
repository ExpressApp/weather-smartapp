{"version":3,"sources":["assets/weather/iconClose.svg","assets/weather/iconCloseRound.svg","assets/weather/iconCloudyDay.svg","assets/weather/iconRainyDay.svg","assets/weather/iconSnowfall.svg","assets/weather/iconSunny.svg","redux/selectors/weatherApp.ts","redux/actions/weatherApp.ts","redux/selectors/ui.ts","components/ui/top-loader/TopLoader.tsx","components/ui/main-loader/MainLoader.tsx","components/WeatherApp.tsx","components/App.tsx","redux/router.ts","redux/reducers/weatherApp.ts","redux/actions/ui.ts","redux/reducers/ui.ts","redux/reducers/index.ts","constants/index.ts","redux/sagas/weatherApp.ts","redux/sagas/index.ts","index.tsx","redux/configureStore.ts"],"names":["getWeather","createSelector","state","weatherApp","weather","getCities","cities","getCity","city","getOpenSearch","openSearch","SET_OPEN_SEARCH","LOAD_WEATHER","LOAD_WEATHER_SUCCESS","LOAD_CITIES","LOAD_CITIES_SUCCESS","LOAD_CITY_SUCCESS","LOAD_INITIAL_STATE","setOpenSearch","createAction","loadWeather","name","loadWeatherSuccess","loadCities","loadCitySuccess","loadCitiesSuccess","loadInitialState","getTopLoader","ui","topLoader","getMainLoader","mainLoader","TopLoader","useSelector","useState","start","setStart","stop","setStop","finish","setFinish","stopTimeout","useRef","finishTimeout","useEffect","current","setTimeout","clearTimeout","className","classnames","MainLoader","WeatherApp","React","search","setSearch","inputRef","dispatch","useDispatch","focus","handleSearchInputChange","debounce","e","text","target","value","length","includes","leading","handleOpenSearch","handleClearSearch","onClick","src","query","toLowerCase","iconSunny","iconRainyDay","iconSnowfall","iconCloudyDay","getIcon","alt","temp","wind","app__aside","width","height","iconClose","ref","onChange","onKeyDown","key","placeholder","autoFocus","iconCloseRound","map","id","App","path","history","createBrowserHistory","reducers","payload","handleActions","SET_TOP_LOADER","SET_MAIN_LOADER","setTopLoader","setMainLoader","rootReducer","combineReducers","router","connectRouter","METHODS","loadWeatherSaga","loadCitiesSaga","loadInitialStateSaga","rootWeatherAppSaga","put","bridge","sendBotEvent","method","params","response","result","temp_c","tempC","wind_kph","windKph","condition","console","error","timeout","all","takeEvery","rootSaga","fork","store","initialState","sagaMiddleware","createSagaMiddleware","routerMiddleware","createRouterMiddleware","createStore","composeWithDevTools","applyMiddleware","run","toPromise","catch","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4845c942.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/iconClose.12207cd1.svg\";","export default __webpack_public_path__ + \"static/media/iconCloseRound.1c4d5cb3.svg\";","export default __webpack_public_path__ + \"static/media/iconCloudyDay.0059aebf.svg\";","export default __webpack_public_path__ + \"static/media/iconRainyDay.7e609283.svg\";","export default __webpack_public_path__ + \"static/media/iconSnowfall.282e3f04.svg\";","export default __webpack_public_path__ + \"static/media/iconSunny.49cd5281.svg\";","import { createSelector } from 'reselect'\nimport { ApplicationState, GetWeatherSelectorResult, Weather } from '../../types'\n\nexport const getWeather = createSelector<ApplicationState, Weather, GetWeatherSelectorResult>(\n  [(state: ApplicationState) => state.weatherApp.weather],\n  weather => {\n    return weather\n  }\n)\n\nexport const getCities = createSelector<ApplicationState, [], []>(\n  [(state: ApplicationState) => state.weatherApp.cities],\n  cities => {\n    return cities\n  }\n)\n\nexport const getCity = createSelector<ApplicationState, string | null, string | null>(\n  [(state: ApplicationState) => state.weatherApp.city],\n  city => {\n    return city\n  }\n)\n\nexport const getOpenSearch = createSelector<ApplicationState, boolean, boolean>(\n  [(state: ApplicationState) => state.weatherApp.openSearch],\n  openSearch => {\n    return openSearch\n  }\n)\n","import { createAction } from 'redux-actions'\nimport { Weather } from '../../types'\n\nexport const SET_OPEN_SEARCH = 'SET_OPEN_SEARCH'\nexport const LOAD_WEATHER = 'LOAD_WEATHER'\nexport const LOAD_WEATHER_SUCCESS = 'LOAD_WEATHER_SUCCESS'\nexport const LOAD_CITIES = 'LOAD_CITIES'\nexport const LOAD_CITIES_SUCCESS = 'LOAD_CITIES_SUCCESS'\nexport const LOAD_CITY_SUCCESS = 'LOAD_CITY_SUCCESS'\nexport const LOAD_INITIAL_STATE = 'LOAD_INITIAL_STATE'\n\nexport const setOpenSearch = createAction(SET_OPEN_SEARCH, (openSearch: boolean) => openSearch)\nexport const loadWeather = createAction(LOAD_WEATHER, (name: string) => name)\nexport const loadWeatherSuccess = createAction(LOAD_WEATHER_SUCCESS, (weather: Weather) => weather)\nexport const loadCities = createAction(LOAD_CITIES, (city: string) => city)\nexport const loadCitySuccess = createAction(LOAD_CITY_SUCCESS, (city: string) => city)\nexport const loadCitiesSuccess = createAction(LOAD_CITIES_SUCCESS, (cities: []) => cities)\nexport const loadInitialState = createAction(LOAD_INITIAL_STATE)\n\nexport type setOpenSearchActionType = ReturnType<typeof setOpenSearch>\nexport type loadWeatherActionType = ReturnType<typeof loadWeather>\nexport type loadWeatherSuccessActionType = ReturnType<typeof loadWeatherSuccess>\nexport type loadCitiesActionType = ReturnType<typeof loadCities>\nexport type loadCitiesSuccessActionType = ReturnType<typeof loadCitiesSuccess>\nexport type loadCitySuccessActionType = ReturnType<typeof loadCitySuccess>\nexport type loadInitialStateActionType = ReturnType<typeof loadInitialState>\n","import { createSelector } from 'reselect'\nimport { ApplicationState } from '../../types'\n\nexport const getTopLoader = createSelector<ApplicationState, boolean, boolean>(\n  [(state: ApplicationState) => state.ui.topLoader],\n  topLoader => topLoader\n)\n\nexport const getMainLoader = createSelector<ApplicationState, boolean, boolean>(\n  [(state: ApplicationState) => state.ui.mainLoader],\n  mainLoader => mainLoader\n)\n","import React, { useEffect, useState, useRef } from 'react'\nimport classnames from 'classnames'\nimport { useSelector } from 'react-redux'\nimport './TopLoader.scss'\nimport { getTopLoader } from '../../../redux/selectors/ui'\nimport { ApplicationState } from '../../../types/reducers'\n\nexport default function TopLoader() {\n  const topLoader = useSelector<ApplicationState, boolean>(getTopLoader)\n\n  const [start, setStart] = useState(false)\n  const [stop, setStop] = useState(false)\n  const [finish, setFinish] = useState(false)\n\n  const stopTimeout = useRef<NodeJS.Timeout | null>(null)\n  const finishTimeout = useRef<NodeJS.Timeout | null>(null)\n\n  useEffect(() => {\n    if (topLoader && !start) {\n      setStart(true)\n    }\n\n    if (!topLoader && start) {\n      setStart(false)\n      setStop(true)\n\n      stopTimeout.current = setTimeout(() => {\n        setFinish(true)\n\n        finishTimeout.current = setTimeout(() => {\n          setStop(false)\n          setFinish(false)\n        }, 100)\n      }, 200)\n    }\n  }, [topLoader, start])\n\n  useEffect(() => {\n    return () => {\n      if (stopTimeout.current) clearTimeout(stopTimeout.current)\n      if (finishTimeout.current) clearTimeout(finishTimeout.current)\n    }\n  }, [])\n\n  return (\n    <div className={classnames({ 'top-loader': true, 'top-loader--enabled': start && !finish })}>\n      <div\n        className={classnames({\n          'top-loader__bar': true,\n          'top-loader__bar--start': start,\n          'top-loader__bar--stop': stop,\n          'top-loader__bar--finish': finish,\n        })}\n      ></div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport './MainLoader.scss'\nimport { getMainLoader } from '../../../redux/selectors/ui'\nimport { ApplicationState } from '../../../types/reducers'\n\nexport default function MainLoader() {\n  const mainLoader = useSelector<ApplicationState, boolean>(getMainLoader)\n\n  if (!mainLoader) return null\n\n  return (\n    <div className=\"main-loader\">\n      <div className=\"main-loader__spinner\">\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n      </div>\n    </div>\n  )\n}\n","import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport classnames from 'classnames'\nimport debounce from 'lodash/debounce'\nimport '../styles/weather/all.scss'\nimport iconClose from '../assets/weather/iconClose.svg'\nimport iconCloseRound from '../assets/weather/iconCloseRound.svg'\nimport iconCloudyDay from '../assets/weather/iconCloudyDay.svg'\nimport iconRainyDay from '../assets/weather/iconRainyDay.svg'\nimport iconSnowfall from '../assets/weather/iconSnowfall.svg'\nimport iconSunny from '../assets/weather/iconSunny.svg'\nimport { ApplicationState, GetWeatherSelectorResult, City } from '../types'\nimport { getWeather, getCities, getCity, getOpenSearch } from '../redux/selectors/weatherApp'\nimport {\n  loadCities,\n  loadWeather,\n  setOpenSearch,\n  loadCitiesSuccess,\n  loadInitialState,\n} from '../redux/actions/weatherApp'\nimport TopLoader from './ui/top-loader/TopLoader'\nimport MainLoader from './ui/main-loader/MainLoader'\n\nexport default function WeatherApp() {\n  const [search, setSearch] = React.useState('')\n  const inputRef = React.useRef() as React.MutableRefObject<HTMLInputElement>\n\n  const dispatch = useDispatch()\n\n  const weather = useSelector<ApplicationState, GetWeatherSelectorResult>(getWeather)\n  const cities = useSelector<ApplicationState, City[]>(getCities)\n  const city = useSelector<ApplicationState, string | null>(getCity)\n  const openSearch = useSelector<ApplicationState, boolean>(getOpenSearch)\n\n  useEffect(() => {\n    dispatch(loadInitialState())\n  }, [dispatch])\n\n  useEffect(() => {\n    if (openSearch) inputRef?.current?.focus()\n  }, [openSearch])\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.key === 'Enter') {\n      dispatch(loadCities(search))\n    }\n  }\n\n  const handleClickCity = (name: string) => {\n    dispatch(loadWeather(name))\n    handleClearSearch()\n    handleOpenSearch()\n  }\n\n  const loadCitiesDebouncer = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const text = e.target.value\n\n    if (text.length >= 3 && !search.includes(text)) dispatch(loadCities(text))\n\n    setSearch(text)\n  }\n\n  const handleSearchInputChange = debounce(loadCitiesDebouncer, 1000, { leading: true })\n\n  const handleOpenSearch = () => {\n    if (!city && openSearch) return\n\n    if (!search.length) dispatch(loadCitiesSuccess([]))\n\n    dispatch(setOpenSearch(!openSearch))\n  }\n\n  const handleClearSearch = () => {\n    setSearch('')\n    dispatch(loadCitiesSuccess([]))\n  }\n\n  const getIcon = (text: string) => {\n    const query = text.toLowerCase()\n\n    switch (true) {\n      case query.includes('sun') || query.includes('clear'):\n        return iconSunny\n      case query.includes('rain'):\n        return iconRainyDay\n      case query.includes('snow') || query.includes('sleet'):\n        return iconSnowfall\n      default:\n        return iconCloudyDay\n    }\n  }\n\n  return (\n    <div className=\"app\">\n      <TopLoader />\n      <header className=\"app__header\">\n        <button className=\"app__btn-menu app__btn-menu--dotted\" onClick={handleOpenSearch}>\n          <span className=\"sr-only\">Open menu</span>\n        </button>\n      </header>\n      <main className=\"app__main\">\n        {city && weather && (\n          <section className=\"weather\">\n            <img className=\"weather__icon\" src={getIcon(weather.text)} alt=\"\" />\n            <strong className=\"weather__title\">{weather.text}</strong>\n            {city && (\n              <>\n                <span className=\"weather__location\">{city}</span>\n                <div className=\"weather__info\">\n                  <div className=\"weather-info\">\n                    {(\n                      <div className=\"weather-info__item\">\n                        <strong className=\"weather-info__title\">{weather.temp || 0}°</strong>\n                        <span className=\"weather-info__desc\">Feels like</span>\n                      </div>\n                    )}\n                    {weather.wind && (\n                      <div className=\"weather-info__item\">\n                        <strong className=\"weather-info__title\">{weather.wind} km/h</strong>\n                        <span className=\"weather-info__desc\">Wind speed</span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </>\n            )}\n          </section>\n        )}\n      </main>\n      <aside\n        className={classnames({\n          app__aside: true,\n          'app__aside--show': openSearch,\n        })}\n      >\n        <section className=\"weather-search\">\n          <header className=\"weather-search__header\">\n            <strong className=\"weather-search__title\">Choose city</strong>\n            <button className=\"app__btn-menu weather-search__btn-close\" onClick={handleOpenSearch}>\n              <img width={18} height={18} src={iconClose} alt=\"close\" />\n            </button>\n          </header>\n          <div className=\"weather-search-input\">\n            <input\n              ref={inputRef}\n              onChange={handleSearchInputChange}\n              onKeyDown={handleKeyDown}\n              className=\"weather-search-input__field\"\n              placeholder=\"Search\"\n              autoFocus\n              value={search}\n            />\n            {!!search.length && (\n              <button onClick={handleClearSearch} className=\"app__btn-menu weather-search-input__btn-clear\">\n                <img width={14} height={14} src={iconCloseRound} alt=\"close\" />\n              </button>\n            )}\n          </div>\n          <ul className=\"weather-search-suggestion\">\n            {cities.map((city: City) => (\n              <li\n                onClick={() => {\n                  handleClickCity(city?.name)\n                }}\n                key={city?.id}\n                className=\"weather-search-suggestion__item\"\n              >\n                {city?.name}\n              </li>\n            ))}\n          </ul>\n        </section>\n      </aside>\n      <MainLoader />\n    </div>\n  )\n}\n","import React from 'react'\nimport { Route, Switch } from 'react-router-dom'\nimport WeatherApp from './WeatherApp'\n\nexport default function App() {\n  return (\n    <Switch>\n      <Route path=\"/\">\n        <WeatherApp />\n      </Route>\n    </Switch>\n  )\n}\n","import { createBrowserHistory } from 'history'\n\n// Create history singleton\nconst history = createBrowserHistory()\n\nexport default history\n","import { handleActions } from 'redux-actions'\nimport { WeatherAppState } from '../../types'\nimport {\n  LOAD_WEATHER,\n  LOAD_WEATHER_SUCCESS,\n  loadWeatherSuccessActionType,\n  loadWeatherActionType,\n  loadCitiesSuccessActionType,\n  LOAD_CITIES_SUCCESS,\n  SET_OPEN_SEARCH,\n  setOpenSearchActionType,\n  LOAD_CITY_SUCCESS,\n  loadCitySuccessActionType,\n} from '../actions/weatherApp'\n\nconst initialState: WeatherAppState = {\n  cities: [],\n  weather: {\n    temp: null,\n    wind: null,\n    text: '',\n  },\n  city: null,\n  openSearch: false,\n}\n\nconst reducers = {\n  [LOAD_WEATHER]: (state: WeatherAppState, { payload: name }: loadWeatherActionType): WeatherAppState => {\n    return {\n      ...state,\n      city: name,\n      weather: {\n        temp: null,\n        wind: null,\n        text: '',\n      },\n    }\n  },\n  [LOAD_WEATHER_SUCCESS]: (\n    state: WeatherAppState,\n    { payload: weather }: loadWeatherSuccessActionType\n  ): WeatherAppState => {\n    return { ...state, weather: { ...weather } }\n  },\n  [LOAD_CITIES_SUCCESS]: (state: WeatherAppState, { payload }: loadCitiesSuccessActionType): WeatherAppState => {\n    return { ...state, cities: payload }\n  },\n  [LOAD_CITY_SUCCESS]: (state: WeatherAppState, { payload }: loadCitySuccessActionType): WeatherAppState => {\n    return { ...state, city: payload }\n  },\n  [SET_OPEN_SEARCH]: (state: WeatherAppState, { payload }: setOpenSearchActionType): WeatherAppState => {\n    return { ...state, openSearch: payload }\n  },\n}\n\nexport const weatherApp = handleActions<WeatherAppState, any>(reducers, initialState)\n","import { createAction } from 'redux-actions'\n\nexport const SET_TOP_LOADER = 'SET_TOP_LOADER'\nexport const SET_MAIN_LOADER = 'SET_MAIN_LOADER'\n\nexport const setTopLoader = createAction(SET_TOP_LOADER, (topLoader: boolean) => topLoader)\nexport const setMainLoader = createAction(SET_MAIN_LOADER, (mainLoader: boolean) => mainLoader)\n\nexport type setTopLoaderActionType = ReturnType<typeof setTopLoader>\nexport type setMainLoaderActionType = ReturnType<typeof setMainLoader>\n","import { handleActions } from 'redux-actions'\nimport { UiState } from '../../types'\nimport { setMainLoaderActionType, setTopLoaderActionType, SET_MAIN_LOADER, SET_TOP_LOADER } from '../actions/ui'\n\nconst initialState: UiState = {\n  topLoader: false,\n  mainLoader: false,\n}\n\nconst reducers = {\n  [SET_TOP_LOADER]: (state: UiState, { payload: topLoader }: setTopLoaderActionType): UiState => {\n    return {\n      ...state,\n      topLoader,\n    }\n  },\n  [SET_MAIN_LOADER]: (state: UiState, { payload: mainLoader }: setMainLoaderActionType): UiState => {\n    return {\n      ...state,\n      mainLoader,\n    }\n  },\n}\n\nexport const ui = handleActions<UiState, any>(reducers, initialState)\n","import { connectRouter } from 'connected-react-router'\nimport { combineReducers } from 'redux'\nimport history from '../router'\nimport { weatherApp } from './weatherApp'\nimport { ui } from './ui'\nimport { ApplicationState } from '../../types'\n\nconst rootReducer = combineReducers<ApplicationState>({\n  weatherApp,\n  ui,\n  router: connectRouter(history),\n})\n\nexport default rootReducer\n","export const METHODS = {\n  CURRENT_WEATHER: 'current_weather',\n  CITIES_AUTOCOMPLETE: 'cities_autocomplete',\n  INITIAL_STATE: 'initial_state',\n  READY: 'ready',\n}\n","import { all, put, takeEvery } from 'redux-saga/effects'\nimport bridge from 'smartapp-bridge'\nimport { Weather } from '../../types'\nimport { METHODS } from '../../constants'\nimport {\n  LOAD_CITIES,\n  LOAD_INITIAL_STATE,\n  LOAD_WEATHER,\n  loadCitiesActionType,\n  loadCitiesSuccess,\n  loadCitySuccess,\n  loadWeatherActionType,\n  loadWeatherSuccess,\n  setOpenSearch,\n} from '../actions/weatherApp'\nimport { setMainLoader, setTopLoader } from '../actions/ui'\n\nexport function* loadWeatherSaga({ payload }: loadWeatherActionType) {\n  try {\n    yield put(setMainLoader(true))\n\n    const response = yield bridge?.sendBotEvent({\n      method: METHODS.CURRENT_WEATHER,\n      params: {\n        city: payload,\n      },\n    })\n\n    const weather: Weather = {\n      temp: response?.payload?.result?.weather?.temp_c || response?.payload?.result?.weather?.tempC || null,\n      wind: response?.payload?.result?.weather?.wind_kph || response?.payload?.result?.weather?.windKph || null,\n      text: response?.payload?.result?.weather?.condition?.text || '',\n    }\n\n    yield put(loadWeatherSuccess(weather))\n    yield put(loadCitiesSuccess([]))\n    yield put(setOpenSearch(false))\n  } catch (e) {\n    console.error(`loadWeatherSaga error: ${e}`)\n  } finally {\n    yield put(setMainLoader(false))\n  }\n}\n\nexport function* loadCitiesSaga({ payload }: loadCitiesActionType) {\n  try {\n    yield put(setTopLoader(true))\n\n    const response = yield bridge?.sendBotEvent({\n      method: METHODS.CITIES_AUTOCOMPLETE,\n      params: {\n        city: payload,\n      },\n    })\n\n    yield put(loadCitiesSuccess(response.payload?.result?.cities || []))\n  } catch (e) {\n    console.error(`loadCitiesSaga error: ${e}`)\n  } finally {\n    yield put(setTopLoader(false))\n  }\n}\n\nexport function* loadInitialStateSaga() {\n  try {\n    yield put(setMainLoader(true))\n\n    bridge?.sendBotEvent({\n      method: METHODS.READY,\n      params: {},\n    })\n\n    const response = yield bridge?.sendBotEvent({\n      method: METHODS.INITIAL_STATE,\n      params: {},\n      timeout: 3000,\n    })\n\n    if (!response.payload?.result?.city) {\n      yield put(setOpenSearch(true))\n      return\n    }\n\n    const weather: Weather = {\n      temp: response?.payload?.result?.weather?.temp_c || response?.payload?.result?.weather?.tempC || null,\n      wind: response?.payload?.result?.weather?.wind_kph || response?.payload?.result?.weather?.windKph || null,\n      text: response.payload?.result?.weather.condition.text || '',\n    }\n\n    yield put(loadCitySuccess(response.payload?.result?.city))\n    yield put(loadWeatherSuccess(weather))\n  } catch (e) {\n    console.error('loadInitialStateSaga error: ', e)\n    yield put(setOpenSearch(true))\n  } finally {\n    yield put(setMainLoader(false))\n  }\n}\n\nexport function* rootWeatherAppSaga() {\n  yield all([\n    takeEvery(LOAD_WEATHER, loadWeatherSaga),\n    takeEvery(LOAD_CITIES, loadCitiesSaga),\n    takeEvery(LOAD_INITIAL_STATE, loadInitialStateSaga),\n  ])\n}\n","import { all, fork } from 'redux-saga/effects'\nimport { rootWeatherAppSaga } from './weatherApp'\n\nfunction* rootSaga() {\n  yield all([\n    fork(rootWeatherAppSaga),\n  ])\n}\n\nexport default rootSaga\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { ConnectedRouter } from 'connected-react-router'\nimport './styles/index.scss'\nimport App from './components/App'\nimport { configureStore } from './redux/configureStore'\nimport history from './redux/router'\n\nconst store = configureStore()\n\nif (module.hot) module.hot.accept()\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <App />\n      </ConnectedRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n","import { applyMiddleware, createStore, Store, AnyAction } from 'redux'\nimport { routerMiddleware as createRouterMiddleware } from 'connected-react-router'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport createSagaMiddleware from 'redux-saga'\nimport rootReducer from './reducers'\nimport rootSaga from './sagas'\nimport history from './router'\nimport { ApplicationState } from '../types'\n\nexport function configureStore(initialState?: ApplicationState): Store<ApplicationState> {\n  const sagaMiddleware = createSagaMiddleware()\n  const routerMiddleware = createRouterMiddleware(history)\n\n  // create store\n  const store: Store<ApplicationState> = createStore<ApplicationState, AnyAction, any, any>(\n    rootReducer,\n    initialState, // TODO: assign default value\n    composeWithDevTools(applyMiddleware(sagaMiddleware, routerMiddleware))\n  )\n\n  sagaMiddleware\n    .run(rootSaga)\n    .toPromise()\n    .catch((e: ExceptionInformation) => console.error('Saga error', e))\n\n  return store\n}\n"],"sourceRoot":""}